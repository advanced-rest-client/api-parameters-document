#%RAML 1.0
title: API parameters demo
version: v1
baseUri: http://{environment}.api.domain.com/{version}/
mediaType: [ application/json, application/xml ]

annotationTypes:
  MarkAnnotation: nil
  deprecated: string
  clearanceLevel:
    properties:
      level:
        enum: [ low, medium, high ]
        required: true
      signature:
        pattern: "\\d{3}-\\w{12}"
        required: true

baseUriParameters:
  environment:
    description: |
      The execution environments. Can be one of:
      - development
      - staging
      - qa
      - production
    type: string
    enum: [development, staging, qa, production]
    pattern: (development|staging|qa|production)
    default: production

traits:
  Paginated: !include traits/pagination.raml
types:
  Feature:
    description: A feature to test enum values in the URI parameters.
    type: string
    enum:
        - A
        - B
        - C
  Person:
    type: object
    properties:
      name: string
/test-parameters/{feature}:
  (deprecated): This endpoint is deprecated and will be removed.
  uriParameters:
    feature:
      type: string
      enum:
        - A
        - B
        - C
  get:
    description: To test enum values in the URI parameters for inline type declaration.
    queryParameters:
      testRepeatable:
        (deprecated): Test parameter will be removed in next version of the API.
        required: true
        type: string[]
        example: [value1, value2]
      numericRepeatable:
        required: true
        type: integer[]
        examples:
          Some-test-example: [123, 456]
          Other-example: [1011, 1213]
      notRequiredRepeatable:
        type: array
        items: date-only
        required: false
  /{typeFeature}:
    (deprecated): This method will be removed in future release of the API.
    uriParameters:
      typeFeature:
        type: Feature
    get:
      (deprecated): This endpoint is deprecated and will be removed.
      description: To test enum values in the URI parameters for global type declaration.
/people:
  displayName: People
  description: The people API used to access data about the people.
  get:
    displayName: List people
    description: Returns a list of products.
    is: [Paginated: {resourceType: Person}]
  /{personId}:
    displayName: A person
    description: The endpoint to access information about the person
    uriParameters:
      personId:
        type: integer
        required: true
        description: The ID of the person in the system. It is generated by the database numeric value for the person.
        example: 1234
    get:
